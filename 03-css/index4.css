.div1{
    width: 100px;
    height: 100px;
    background-color: aquamarine;
}

/* 
    :hover -> 요소에 마우스를 올렸을 때
*/

.div1:hover{
    background-color: hotpink;
    width: 150px;
    height: 150px;
}

/* 
    :active -> 요소를 마우스로 클릭하고 있을 때
*/

.div1:active {
    background-color: brown;
    width: 200px;
}

/* 
    :focus -> 요소에 포커스가 됐을 때  
*/

input:focus {
    background-color: violet;
    color: lightblue;
    outline-color: yellowgreen;
}

.links > a:hover {
    background-color: coral;
}

.links > a:visited {
    color: red;
}

/* 요소 상황에 따른 가상 클래스 선택자 */

.zoo > * {
    background-color: green;
    color:white;
}

/* 
    #1. e:first-child -> e(요소)가 첫번째 요소라면
*/

.zoo > *:first-child{
    background-color: red;
}

/* 
   #2. e:last-child -> e(요소)가 마지막 요소라면
*/

.zoo > *:last-child{
    background-color: black;
}

/* 
    #3. e:nth-child(n)-> e(요소)가 n번째 요소라면 
*/

.zoo > *:nth-child(2){
    background-color: aqua;
}

/* 
    #4. e:not(xyz) -> xyz가 아닌 요소 선택
*/

.zoo > *:not(div) {
    background-color: pink;
}

/* 가상요소: before, after */
/* 
    -html 문서의 특정 부분을 스타일링 하기 위해 사용.
    -실제로 html문서에 존재하지 않는 부분이지만 css를 통해 스타일 적용이 가능. 

    가상클래스 : & 가상요소 :: 차이? 
    -css 사양이 발전하면서 가상클래스와 가상 요소를 명확하게 구분할 필요성이 생김. 
    - 가상 클래스: 문서의 기존 요소 상태를 나타냄
    - 가상 요소: 문서의 특정 부분을 생성하여 스타일링함
    그렇기에 구분하기 위해서 ::로 표기하는 새로운 표기법을 도입. 

*/

.box::before{
    content: "택시"
}

.box::after{
    content: "빨리"
}